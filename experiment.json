{
  "openapi": "3.1.0",
  "info": {
    "title": "Experiment API",
    "description": "An experimental API demonstrating all four HTTP methods: GET, POST, PUT, and DELETE",
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "https://api.experiment.com",
      "description": "Experiment API Server"
    }
  ],
  "paths": {
    "/users": {
      "get": {
        "tags": ["Users"],
        "summary": "Get all users",
        "description": "Retrieve a list of all users in the system",
        "operationId": "getAllUsers",
        "security": [{ "HTTPBearer": [] }],
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 20,
              "minimum": 1,
              "maximum": 100
            },
            "description": "Maximum number of users to return"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0,
              "minimum": 0
            },
            "description": "Number of users to skip"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserListResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing authentication token"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "post": {
        "tags": ["Users"],
        "summary": "Create a new user",
        "description": "Create a new user in the system",
        "operationId": "createUser",
        "security": [{ "HTTPBearer": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUserRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid input data"
          },
          "401": {
            "description": "Unauthorized - Invalid or missing authentication token"
          },
          "409": {
            "description": "Conflict - User already exists"
          }
        }
      }
    },
    "/users/{userId}": {
      "get": {
        "tags": ["Users"],
        "summary": "Get user by ID",
        "description": "Retrieve a specific user by their unique identifier",
        "operationId": "getUserById",
        "security": [{ "HTTPBearer": [] }],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Unique identifier of the user"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing authentication token"
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "put": {
        "tags": ["Users"],
        "summary": "Update user",
        "description": "Update an existing user's information",
        "operationId": "updateUser",
        "security": [{ "HTTPBearer": [] }],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Unique identifier of the user to update"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid input data"
          },
          "401": {
            "description": "Unauthorized - Invalid or missing authentication token"
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "delete": {
        "tags": ["Users"],
        "summary": "Delete user",
        "description": "Delete a user from the system",
        "operationId": "deleteUser",
        "security": [{ "HTTPBearer": [] }],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Unique identifier of the user to delete"
          }
        ],
        "responses": {
          "204": {
            "description": "User deleted successfully"
          },
          "401": {
            "description": "Unauthorized - Invalid or missing authentication token"
          },
          "404": {
            "description": "User not found"
          },
          "409": {
            "description": "Conflict - Cannot delete user due to dependencies"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "User": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique identifier for the user"
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "User's email address"
          },
          "firstName": {
            "type": "string",
            "description": "User's first name"
          },
          "lastName": {
            "type": "string",
            "description": "User's last name"
          },
          "age": {
            "type": "integer",
            "minimum": 0,
            "maximum": 150,
            "description": "User's age"
          },
          "status": {
            "type": "string",
            "enum": ["active", "inactive", "suspended"],
            "description": "User's account status"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the user was created"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the user was last updated"
          }
        },
        "required": [
          "id",
          "email",
          "firstName",
          "lastName",
          "status",
          "createdAt",
          "updatedAt"
        ],
        "title": "User"
      },
      "CreateUserRequest": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "description": "User's email address"
          },
          "firstName": {
            "type": "string",
            "minLength": 1,
            "maxLength": 50,
            "description": "User's first name"
          },
          "lastName": {
            "type": "string",
            "minLength": 1,
            "maxLength": 50,
            "description": "User's last name"
          },
          "age": {
            "type": "integer",
            "minimum": 0,
            "maximum": 150,
            "description": "User's age"
          },
          "password": {
            "type": "string",
            "minLength": 8,
            "description": "User's password"
          }
        },
        "required": ["email", "firstName", "lastName", "password"],
        "title": "CreateUserRequest"
      },
      "UpdateUserRequest": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "description": "User's email address"
          },
          "firstName": {
            "type": "string",
            "minLength": 1,
            "maxLength": 50,
            "description": "User's first name"
          },
          "lastName": {
            "type": "string",
            "minLength": 1,
            "maxLength": 50,
            "description": "User's last name"
          },
          "age": {
            "type": "integer",
            "minimum": 0,
            "maximum": 150,
            "description": "User's age"
          },
          "status": {
            "type": "string",
            "enum": ["active", "inactive", "suspended"],
            "description": "User's account status"
          }
        },
        "title": "UpdateUserRequest"
      },
      "UserListResponse": {
        "type": "object",
        "properties": {
          "users": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/User"
            },
            "description": "List of users"
          },
          "total": {
            "type": "integer",
            "description": "Total number of users available"
          },
          "limit": {
            "type": "integer",
            "description": "Maximum number of users returned"
          },
          "offset": {
            "type": "integer",
            "description": "Number of users skipped"
          }
        },
        "required": ["users", "total", "limit", "offset"],
        "title": "UserListResponse"
      }
    },
    "securitySchemes": {
      "HTTPBearer": {
        "type": "http",
        "scheme": "bearer"
      }
    }
  }
}
